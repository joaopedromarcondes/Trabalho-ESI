# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'cucumber/rails'

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature


require 'capybara/cucumber'
require 'selenium-webdriver'

require 'selenium-webdriver'

firefox_paths = [
  ENV['FIREFOX_BIN'],
  '/snap/firefox/current/usr/lib/firefox/firefox',
  '/usr/bin/firefox',
  '/usr/local/bin/firefox'
].compact

firefox_binary = firefox_paths.find { |p| File.exist?(p) }

if firefox_binary
  Capybara.register_driver :selenium do |app|
    options = Selenium::WebDriver::Firefox::Options.new
    options.binary = firefox_binary

    fake_location = {
      location: { lat: -23.55052, lng: -46.633308 },
      accuracy: 12000.0
    }

    options.add_preference('geo.prompt.testing', true)
    options.add_preference('geo.prompt.testing.allow', true)
    options.add_preference('permissions.default.geo', 1)
    options.add_preference('geo.provider.network.url', "data:application/json,#{fake_location.to_json}")

    Capybara::Selenium::Driver.new(app, browser: :firefox, options: options)
  end

  Capybara.default_driver = :selenium
else
  warn "[Cucumber] No browser binary found. Falling back to :rack_test (no JS)."
  Capybara.default_driver = :rack_test
end

